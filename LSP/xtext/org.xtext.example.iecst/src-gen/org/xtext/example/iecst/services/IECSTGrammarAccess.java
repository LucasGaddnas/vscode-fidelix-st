/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.iecst.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IECSTGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.iecst.IECST.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProgramsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProgramsProgramParserRuleCall_0_0 = (RuleCall)cProgramsAssignment_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		private final Assignment cFunctionbAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionbFunctionBlockParserRuleCall_2_0 = (RuleCall)cFunctionbAssignment_2.eContents().get(0);
		private final Assignment cTypesAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTypesTypeParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		
		//Model:
		//    (programs+=Program | functions+=Function | functionb+=FunctionBlock | types+=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(programs+=Program | functions+=Function | functionb+=FunctionBlock | types+=Type)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//programs+=Program
		public Assignment getProgramsAssignment_0() { return cProgramsAssignment_0; }
		
		//Program
		public RuleCall getProgramsProgramParserRuleCall_0_0() { return cProgramsProgramParserRuleCall_0_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_0() { return cFunctionsFunctionParserRuleCall_1_0; }
		
		//functionb+=FunctionBlock
		public Assignment getFunctionbAssignment_2() { return cFunctionbAssignment_2; }
		
		//FunctionBlock
		public RuleCall getFunctionbFunctionBlockParserRuleCall_2_0() { return cFunctionbFunctionBlockParserRuleCall_2_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0() { return cTypesTypeParserRuleCall_3_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.iecst.IECST.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROGRAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEND_PROGRAMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Program:
		//    'PROGRAM' name=ID 'END_PROGRAM';
		@Override public ParserRule getRule() { return rule; }
		
		//'PROGRAM' name=ID 'END_PROGRAM'
		public Group getGroup() { return cGroup; }
		
		//'PROGRAM'
		public Keyword getPROGRAMKeyword_0() { return cPROGRAMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'END_PROGRAM'
		public Keyword getEND_PROGRAMKeyword_2() { return cEND_PROGRAMKeyword_2; }
	}
	public class FunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.iecst.IECST.FunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTION_BLOCKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEND_FUNCTION_BLOCKKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FunctionBlock:
		//    'FUNCTION_BLOCK' name=ID 'END_FUNCTION_BLOCK';
		@Override public ParserRule getRule() { return rule; }
		
		//'FUNCTION_BLOCK' name=ID 'END_FUNCTION_BLOCK'
		public Group getGroup() { return cGroup; }
		
		//'FUNCTION_BLOCK'
		public Keyword getFUNCTION_BLOCKKeyword_0() { return cFUNCTION_BLOCKKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'END_FUNCTION_BLOCK'
		public Keyword getEND_FUNCTION_BLOCKKeyword_2() { return cEND_FUNCTION_BLOCKKeyword_2; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.iecst.IECST.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDtypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDtypeDtypesParserRuleCall_3_0 = (RuleCall)cDtypeAssignment_3.eContents().get(0);
		private final Keyword cEND_FUNCTIONKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//    'FUNCTION' name=ID ':' dtype=Dtypes 'END_FUNCTION';
		@Override public ParserRule getRule() { return rule; }
		
		//'FUNCTION' name=ID ':' dtype=Dtypes 'END_FUNCTION'
		public Group getGroup() { return cGroup; }
		
		//'FUNCTION'
		public Keyword getFUNCTIONKeyword_0() { return cFUNCTIONKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//dtype=Dtypes
		public Assignment getDtypeAssignment_3() { return cDtypeAssignment_3; }
		
		//Dtypes
		public RuleCall getDtypeDtypesParserRuleCall_3_0() { return cDtypeDtypesParserRuleCall_3_0; }
		
		//'END_FUNCTION'
		public Keyword getEND_FUNCTIONKeyword_4() { return cEND_FUNCTIONKeyword_4; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.iecst.IECST.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTYPEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEND_TYPEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Type:
		//    'TYPE' name=ID  'END_TYPE';
		@Override public ParserRule getRule() { return rule; }
		
		//'TYPE' name=ID  'END_TYPE'
		public Group getGroup() { return cGroup; }
		
		//'TYPE'
		public Keyword getTYPEKeyword_0() { return cTYPEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'END_TYPE'
		public Keyword getEND_TYPEKeyword_2() { return cEND_TYPEKeyword_2; }
	}
	public class DtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.iecst.IECST.Dtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSINTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUSINTKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cINTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUINTKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDINTKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cUDINTKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLINTKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cULINTKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cREALKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLREALKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cTIMEKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTODKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDTKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cBYTEKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cWORDKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cDWORDKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		
		//Dtypes:
		//    ('BOOL' | 'SINT' | 'USINT' | 'INT' | 'UINT' | 'DINT' | 'UDINT' | 'LINT' | 'ULINT' | 'REAL'
		//    | 'LREAL' | 'TIME' | 'TOD' | 'DT' | 'BYTE' | 'WORD' | 'DWORD');
		@Override public ParserRule getRule() { return rule; }
		
		//('BOOL' | 'SINT' | 'USINT' | 'INT' | 'UINT' | 'DINT' | 'UDINT' | 'LINT' | 'ULINT' | 'REAL'
		//| 'LREAL' | 'TIME' | 'TOD' | 'DT' | 'BYTE' | 'WORD' | 'DWORD')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'SINT'
		public Keyword getSINTKeyword_1() { return cSINTKeyword_1; }
		
		//'USINT'
		public Keyword getUSINTKeyword_2() { return cUSINTKeyword_2; }
		
		//'INT'
		public Keyword getINTKeyword_3() { return cINTKeyword_3; }
		
		//'UINT'
		public Keyword getUINTKeyword_4() { return cUINTKeyword_4; }
		
		//'DINT'
		public Keyword getDINTKeyword_5() { return cDINTKeyword_5; }
		
		//'UDINT'
		public Keyword getUDINTKeyword_6() { return cUDINTKeyword_6; }
		
		//'LINT'
		public Keyword getLINTKeyword_7() { return cLINTKeyword_7; }
		
		//'ULINT'
		public Keyword getULINTKeyword_8() { return cULINTKeyword_8; }
		
		//'REAL'
		public Keyword getREALKeyword_9() { return cREALKeyword_9; }
		
		//'LREAL'
		public Keyword getLREALKeyword_10() { return cLREALKeyword_10; }
		
		//'TIME'
		public Keyword getTIMEKeyword_11() { return cTIMEKeyword_11; }
		
		//'TOD'
		public Keyword getTODKeyword_12() { return cTODKeyword_12; }
		
		//'DT'
		public Keyword getDTKeyword_13() { return cDTKeyword_13; }
		
		//'BYTE'
		public Keyword getBYTEKeyword_14() { return cBYTEKeyword_14; }
		
		//'WORD'
		public Keyword getWORDKeyword_15() { return cWORDKeyword_15; }
		
		//'DWORD'
		public Keyword getDWORDKeyword_16() { return cDWORDKeyword_16; }
	}
	
	
	private final ModelElements pModel;
	private final ProgramElements pProgram;
	private final FunctionBlockElements pFunctionBlock;
	private final FunctionElements pFunction;
	private final TypeElements pType;
	private final DtypesElements pDtypes;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IECSTGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgram = new ProgramElements();
		this.pFunctionBlock = new FunctionBlockElements();
		this.pFunction = new FunctionElements();
		this.pType = new TypeElements();
		this.pDtypes = new DtypesElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.iecst.IECST".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (programs+=Program | functions+=Function | functionb+=FunctionBlock | types+=Type)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Program:
	//    'PROGRAM' name=ID 'END_PROGRAM';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//FunctionBlock:
	//    'FUNCTION_BLOCK' name=ID 'END_FUNCTION_BLOCK';
	public FunctionBlockElements getFunctionBlockAccess() {
		return pFunctionBlock;
	}
	
	public ParserRule getFunctionBlockRule() {
		return getFunctionBlockAccess().getRule();
	}
	
	//Function:
	//    'FUNCTION' name=ID ':' dtype=Dtypes 'END_FUNCTION';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Type:
	//    'TYPE' name=ID  'END_TYPE';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Dtypes:
	//    ('BOOL' | 'SINT' | 'USINT' | 'INT' | 'UINT' | 'DINT' | 'UDINT' | 'LINT' | 'ULINT' | 'REAL'
	//    | 'LREAL' | 'TIME' | 'TOD' | 'DT' | 'BYTE' | 'WORD' | 'DWORD');
	public DtypesElements getDtypesAccess() {
		return pDtypes;
	}
	
	public ParserRule getDtypesRule() {
		return getDtypesAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
