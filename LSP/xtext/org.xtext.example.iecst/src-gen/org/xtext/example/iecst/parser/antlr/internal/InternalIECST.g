/*
 * generated by Xtext 2.25.0
 */
grammar InternalIECST;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.iecst.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.iecst.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.iecst.services.IECSTGrammarAccess;

}

@parser::members {

 	private IECSTGrammarAccess grammarAccess;

    public InternalIECSTParser(TokenStream input, IECSTGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected IECSTGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getProgramsProgramParserRuleCall_0_0());
				}
				lv_programs_0_0=ruleProgram
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"programs",
						lv_programs_0_0,
						"org.xtext.example.iecst.IECST.Program");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_1_0());
				}
				lv_functions_1_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"functions",
						lv_functions_1_0,
						"org.xtext.example.iecst.IECST.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFunctionbFunctionBlockParserRuleCall_2_0());
				}
				lv_functionb_2_0=ruleFunctionBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"functionb",
						lv_functionb_2_0,
						"org.xtext.example.iecst.IECST.FunctionBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTypesTypeParserRuleCall_3_0());
				}
				lv_types_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"types",
						lv_types_3_0,
						"org.xtext.example.iecst.IECST.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PROGRAM'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getPROGRAMKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='END_PROGRAM'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getEND_PROGRAMKeyword_2());
		}
	)
;

// Entry rule entryRuleFunctionBlock
entryRuleFunctionBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionBlockRule()); }
	iv_ruleFunctionBlock=ruleFunctionBlock
	{ $current=$iv_ruleFunctionBlock.current; }
	EOF;

// Rule FunctionBlock
ruleFunctionBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FUNCTION_BLOCK'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionBlockAccess().getFUNCTION_BLOCKKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionBlockAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='END_FUNCTION_BLOCK'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionBlockAccess().getEND_FUNCTION_BLOCKKeyword_2());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FUNCTION'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFUNCTIONKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getDtypeDtypesParserRuleCall_3_0());
				}
				lv_dtype_3_0=ruleDtypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"dtype",
						lv_dtype_3_0,
						"org.xtext.example.iecst.IECST.Dtypes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='END_FUNCTION'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getEND_FUNCTIONKeyword_4());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TYPE'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTYPEKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='END_TYPE'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getEND_TYPEKeyword_2());
		}
	)
;

// Entry rule entryRuleDtypes
entryRuleDtypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDtypesRule()); }
	iv_ruleDtypes=ruleDtypes
	{ $current=$iv_ruleDtypes.current.getText(); }
	EOF;

// Rule Dtypes
ruleDtypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='BOOL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getBOOLKeyword_0());
		}
		    |
		kw='SINT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getSINTKeyword_1());
		}
		    |
		kw='USINT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getUSINTKeyword_2());
		}
		    |
		kw='INT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getINTKeyword_3());
		}
		    |
		kw='UINT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getUINTKeyword_4());
		}
		    |
		kw='DINT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getDINTKeyword_5());
		}
		    |
		kw='UDINT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getUDINTKeyword_6());
		}
		    |
		kw='LINT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getLINTKeyword_7());
		}
		    |
		kw='ULINT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getULINTKeyword_8());
		}
		    |
		kw='REAL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getREALKeyword_9());
		}
		    |
		kw='LREAL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getLREALKeyword_10());
		}
		    |
		kw='TIME'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getTIMEKeyword_11());
		}
		    |
		kw='TOD'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getTODKeyword_12());
		}
		    |
		kw='DT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getDTKeyword_13());
		}
		    |
		kw='BYTE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getBYTEKeyword_14());
		}
		    |
		kw='WORD'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getWORDKeyword_15());
		}
		    |
		kw='DWORD'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDtypesAccess().getDWORDKeyword_16());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
