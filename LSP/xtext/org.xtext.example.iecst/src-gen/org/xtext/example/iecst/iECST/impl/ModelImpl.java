/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.iecst.iECST.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.iecst.iECST.Function;
import org.xtext.example.iecst.iECST.FunctionBlock;
import org.xtext.example.iecst.iECST.IECSTPackage;
import org.xtext.example.iecst.iECST.Model;
import org.xtext.example.iecst.iECST.Program;
import org.xtext.example.iecst.iECST.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.iecst.iECST.impl.ModelImpl#getPrograms <em>Programs</em>}</li>
 *   <li>{@link org.xtext.example.iecst.iECST.impl.ModelImpl#getFunctions <em>Functions</em>}</li>
 *   <li>{@link org.xtext.example.iecst.iECST.impl.ModelImpl#getFunctionb <em>Functionb</em>}</li>
 *   <li>{@link org.xtext.example.iecst.iECST.impl.ModelImpl#getTypes <em>Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getPrograms() <em>Programs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrograms()
   * @generated
   * @ordered
   */
  protected EList<Program> programs;

  /**
   * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctions()
   * @generated
   * @ordered
   */
  protected EList<Function> functions;

  /**
   * The cached value of the '{@link #getFunctionb() <em>Functionb</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionb()
   * @generated
   * @ordered
   */
  protected EList<FunctionBlock> functionb;

  /**
   * The cached value of the '{@link #getTypes() <em>Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypes()
   * @generated
   * @ordered
   */
  protected EList<Type> types;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IECSTPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Program> getPrograms()
  {
    if (programs == null)
    {
      programs = new EObjectContainmentEList<Program>(Program.class, this, IECSTPackage.MODEL__PROGRAMS);
    }
    return programs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Function> getFunctions()
  {
    if (functions == null)
    {
      functions = new EObjectContainmentEList<Function>(Function.class, this, IECSTPackage.MODEL__FUNCTIONS);
    }
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FunctionBlock> getFunctionb()
  {
    if (functionb == null)
    {
      functionb = new EObjectContainmentEList<FunctionBlock>(FunctionBlock.class, this, IECSTPackage.MODEL__FUNCTIONB);
    }
    return functionb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Type> getTypes()
  {
    if (types == null)
    {
      types = new EObjectContainmentEList<Type>(Type.class, this, IECSTPackage.MODEL__TYPES);
    }
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IECSTPackage.MODEL__PROGRAMS:
        return ((InternalEList<?>)getPrograms()).basicRemove(otherEnd, msgs);
      case IECSTPackage.MODEL__FUNCTIONS:
        return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
      case IECSTPackage.MODEL__FUNCTIONB:
        return ((InternalEList<?>)getFunctionb()).basicRemove(otherEnd, msgs);
      case IECSTPackage.MODEL__TYPES:
        return ((InternalEList<?>)getTypes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IECSTPackage.MODEL__PROGRAMS:
        return getPrograms();
      case IECSTPackage.MODEL__FUNCTIONS:
        return getFunctions();
      case IECSTPackage.MODEL__FUNCTIONB:
        return getFunctionb();
      case IECSTPackage.MODEL__TYPES:
        return getTypes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IECSTPackage.MODEL__PROGRAMS:
        getPrograms().clear();
        getPrograms().addAll((Collection<? extends Program>)newValue);
        return;
      case IECSTPackage.MODEL__FUNCTIONS:
        getFunctions().clear();
        getFunctions().addAll((Collection<? extends Function>)newValue);
        return;
      case IECSTPackage.MODEL__FUNCTIONB:
        getFunctionb().clear();
        getFunctionb().addAll((Collection<? extends FunctionBlock>)newValue);
        return;
      case IECSTPackage.MODEL__TYPES:
        getTypes().clear();
        getTypes().addAll((Collection<? extends Type>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IECSTPackage.MODEL__PROGRAMS:
        getPrograms().clear();
        return;
      case IECSTPackage.MODEL__FUNCTIONS:
        getFunctions().clear();
        return;
      case IECSTPackage.MODEL__FUNCTIONB:
        getFunctionb().clear();
        return;
      case IECSTPackage.MODEL__TYPES:
        getTypes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IECSTPackage.MODEL__PROGRAMS:
        return programs != null && !programs.isEmpty();
      case IECSTPackage.MODEL__FUNCTIONS:
        return functions != null && !functions.isEmpty();
      case IECSTPackage.MODEL__FUNCTIONB:
        return functionb != null && !functionb.isEmpty();
      case IECSTPackage.MODEL__TYPES:
        return types != null && !types.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
