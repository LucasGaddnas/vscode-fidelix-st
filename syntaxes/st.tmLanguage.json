{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Structured Text",
	"patterns": [
		{
			"include": "#system"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#strings_dq"
		},
		{
			"include": "#strings_sq"
		},
		{
			"include": "#meta"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#keywords"
		}
	],
	"repository": {
		"system": {
			"patterns": [
				{
					"match": "\\n",
					"name": "meta.ending-space"
				},
				{
					"begin": "^(?=\\t)",
					"end": "(?=[^\\t])",
					"name": "meta.leading-space",
					"patterns": [
						{
							"captures": {
								"1": {
									
									"name": "meta.odd-tab.tabs"
								},
								"2": {
									"name": "meta.even-tab.tabs"
								}
							},
							"match": "(\\t)(\\t)?"
						}
					]
				},
				{
					"begin": "^(?= )",
					"end": "(?=[^ ])",
					"name": "meta.leading-space",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "meta.odd-tab.spaces"
								},
								"2": {
									"name": "meta.even-tab.spaces"
								}
							},
							"match": "(  )(  )?"
						}
					]
				},
				{
					"name": "storage.type.class.st",
					"match": "\\s*(PROGRAM|FUNCTION_BLOCK|FUNCTION|TYPE)\\s*([a-zA-Z_]\\w*)\\s*\\n?",
					"captures": {
						"2": {
							"name": "entity.name.function.st"
						}
					}
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer.st",
					"match": "\\b(2#[0-9\\_]*)+\\b"
				},
				{
					"name": "constant.numeric.hex.st",
					"match": "\\b(16#[0-9A-Fa-f\\_]*)+\\b"
				},
				{
					"name": "constant.numeric.integer.st",
					"match": "\\b(8#[0-9\\_]*)+\\b"
				},
				{
					"name": "constant.numeric.float.st",
					"match": "\\b\\d*\\.\\d+([eE][\\-+]?\\d+)?\\b"
				},
				{
					"name": "constant.numeric.integer.st",
					"match": "\\b(\\d)+\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.conditional.st",
					"match": "\\b(END_)?(IF|CASE|OF|ELSE|ELSIF|THEN)\\b"
				},
				{
					"name": "keyword.control.st",
					"match": "\\b(END_)?(WHILE|FOR|REPEAT|DO|TO|BY|AT|TASK|WITH|RETURN|EXIT|CONTINUE|USING|FROM|UNTIL)\\b"
				},
				{
					"name": "keyword.operator.assignment.st",
					"match": "(:=|=>)"
				},
				{
					"name": "keyword.operator.content.st",
					"match": "\\^|MOVE"
				},
				{
					"name": "punctuation.terminator.statement.st",
					"match": "[;]"
				},
				{
					"name": "keyword.operator.logical.st",
					"match": "\\b(OR(_ELSE)?|AND(_THEN)?|NOT|XOR|GE|LE|EQ|NE|GT|LT)\\b|&"
				},
				{
					"name": "keyword.operator.comparison.st",
					"match": "(<>|<|=|>|<=|>=)"
				},
				{
					"name": "keyword.operator.arithmetic.st",
					"match": "(\\+|\\-|\\/|\\*)"
				},
				{
					"name": "keyword.operator.arithmetic.st",
					"match": "\\b(ABS|SIN|MOD|ABS|ACOS|ASIN|ATAN|COS|EXP|EXPT|LN|LOG|SIN|SQRT|TAN|SEL|MUX|SHL|SHR|ROL|ROR|ADD|DIV|MUL|SUB|LIMIT|MAX|MIN|ADR(INST)?|SIZE(OF)?|BIT_?ADR|TRUNC(_INT)?)\\b"
				},
				{
					"name": "keyword.operator.arithmetic.st",
					"match": "\\b(SEL_|MUX_)[A-Za-z]*\\b"
				},
				{
					"name": "keyword.other.storage.st",
					"match": "\\b(POINTER( TO)?|REF(ERENCE)?|REF_TO|AT|OVERLAP|TASK|WITH|USING|FROM)\\b"
				},
				{
					"name": "storage.modifier.st",
					"match": "\\b(?:ABSTRACT|CONSTANT|RETAIN|PERSISTENT|PUBLIC|PRIVATE|PROTECTED|INTERNAL|FINAL)\\b"
				},
				{
					"name": "constant.language.st",
					"match": "\\b(TRUE|FALSE|NULL)\\b"
				},
				{
					"name": "entity.name.type.st",
					"match": "\\b(VAR(_(INPUT|OUTPUT|IN_OUT|TEMP|GLOBAL|ACCESS|EXTERNAL))?|END_VAR)\\b"
				},
				{
					"name": "support.type.primitives.st",
					"match" : "\\b(BOOL|BYTE|(?:D|L)?WORD|U?(?:S|D|L)?INT|L?REAL|TIME(?:_OF_DAY)?|TOD|DT|DATE(?:_AND_TIME)?|STRING|ARRAY|ANY)\\b"
				},
				{
					"name": "storage.type.class.st",
					"match": "\\b(END_)?(PROGRAM|CONFIGURATION|TCP|RESOURCE|CHANNEL|LIBRARY|FOLDER|BINARIES|INCLUDES|SOURCES|ACTION|STEP|INITIAL_STEP|TRANSITION|TYPE|STRUCT|FUNCTION|FUNCTION_BLOCK|NAMESPACE|IMPLEMENTATION)\\b"
				},
				{
					"name": "support.function.st",
					"match": "\\b(RS|SR|TON|TP|TOF|TRUNC|CTD|CTU|CTUD|R_TRIG|F_TRIG|MOVE|CONCAT|DELETE|FIND|INSERT|LEFT|LEN|REPLACE|RIGHT|RTC|MID|SEMA|ROUND|FLOOR|CEIL|UNPACK|REF)\\b"
				},
				{
					"name": "variable.function.st",
					"match": "\\b[A-Za-z_]*(_TO_)[A-Za-z_]*\\b"
				},
				{
					"name": "variable.function.st",
					"match": "\\b(TO_|FROM_|TRUNC_)[A-Za-z_]*\\b"
				},
				{
					"name": "support.type.primitives.st",
					"match": "\\b(ANY_)?(DERIVED|ELEMENTARY|MAGNITUDE|NUM|REAL|INT|UNSIGNED|SIGNED|DURATION|BIT|CHARS|STRING|CHAR|DATE)\\b"
				},
				{
			
					"name": "support.function.st",
					"match": "(?i:(\\b[a-zA-Z_x7f-xff][a-zA-Z0-9_x7f-xff]*?\\b)(?=\\(\\)?))",
					"captures": {
						"1": {
							"name": "entity.name.function.st"
						}
					}
				},
				{
					"captures": {
						"1": {
							"name": "storage.modifier.st"
						},
						"2": {
							"name": "entity.other.inherited-class.st"
						}
					},
					"match": "\\b(EXTENDS|IMPLEMENTS)\\b",
					"comment": ",(?:\\s+([A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*))?\\b"
				},
				{
					"match": "\\b(?:THIS|SUPER)\\b",
					"name": "variable.language.st"
				},
				{
					"name": "invalid.st",
					"match": "#"
				},
				{
					"match": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*(?=\\()(?!\\(\\*)",
					"name": "variable.function.st"
				},
				{
					"name": "variable.other.object.st",
					"match": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*(?=\\.)"
				},
				{
					"name": "variable.other.object.property.st",
					"match": "(?<=\\.)[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*(?=\\.)"
				},
				{
					"name": "variable.other.property.st",
					"match": "(?<=\\.)[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b"
				},
				{
					"name": "variable.other.readwrite.st",
					"match": "\\b[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b"
				},
				{
					"name": "support.type.primitives.st",
					"match": ":\\s*[A-Za-z_](?:[0-9A-Za-z]|(?<!_)_)*\\b"
				}
			]
		},
		"variables":{
			"patterns": [
				{
					"name": "variable.other.constant",
					"match": "\\b(T|DT|TOD|D)#[0-9\\:\\-\\_shmyd]*\\b"
				},
				{
					"name": "variable.other.constant",
					"match": "\\b[A-Za-z]{1,6}#[0-9\\_]**\\b"
				},
				{
					"name": "variable.other.constant",
					"match": "\\%(I|Q|M)(X|B|W|D|L)[0-9\\.]*\\b"
				},
				{
					"name": "variable.other.constant",
					"match": "\\%(I|Q)[0-9\\.]*\\b"
				},
				{
					"name": "punctuation.accessor.st",
					"match": "(?<!\\.)\\.(?!\\.)"
				},
				{
					"name": "keyword.operator.range.st",
					"match": "(?<!\\.)\\.\\.(?!\\.)"
				}
				
			]
		},
		"meta":{
			"patterns": [
				{
					"name": "meta.expression.st",
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.begin.st"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.end.st"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.index.st",
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.begin.st"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.end.st"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.pragma.st",
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.brace.begin.st"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.brace.end.st"
						}
					},
					"patterns": [
						{
							"comment": "$self"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#comment_l"
				},
				{
					"include": "#comment_st"
				},
				{
					"include": "#comment_g"
				}
			]
		},
		"comment_l": {
			"name": "comment.line.st",
			"begin": "\\/\\/",
			"end": "$",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				}
			]
		},
		"comment_st": {
			"name": "comment.block.st",
			"begin": "\\(\\*",
			"end": "\\*\\)",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				}
			]
		},
		"comment_g": {
			"name": "comment.block.st",
			"begin": "\\/\\*",
			"end": "\\*\\/",
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				}
			]
		},
		"strings_dq": {
			"name": "string.quoted.double.st",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.double.begin.st"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.double.begin.st"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				}
			]
		},
		"strings_sq": {
			"name": "string.quoted.single.st",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.double.begin.st"
				}
			},
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.double.begin.st"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.st",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.st"
}